# EditorConfig is awesome:http://EditorConfig.org
# From https://raw.githubusercontent.com/dotnet/roslyn/master/.editorconfig
# https://github.com/BenjaminAbt/templates/blob/main/editorconfig/.editorconfig

###############################
# Core EditorConfig Options   #
###############################

# top-most EditorConfig file
root = true                               # stop .editorconfig files search on current file.

# All files
# Don't use tabs for indentation.
[*]
indent_style = space
trim_trailing_whitespace = true           # Remove trailing whitespace
insert_final_newline = true               # Ensure file ends with a newline
max_line_length = 120                     # Maximum line length for readability

###############################
# Markdown                    #
###############################

[*.md]
indent_size = 4
trim_trailing_whitespace = false
max_line_length = off

###############################
# Bicep                       #
###############################

[*.bicep]
indent_size = 2
max_line_length = off

###############################
# XML                         #
###############################

[*.xml]
indent_size = 2
max_line_length = off

###############################
# TypeScript                  #
###############################

[*.ts]
indent_size = 2

###############################
# JavaScript                  #
###############################

[*.js]
indent_size = 2

###############################
# HTML                        #
###############################

[*.html]
indent_size = 2

###############################
# CSS/SCSS                    #
###############################

[*.{css,scss}]
indent_size = 2

###############################
# YAML                        #
###############################

[*.{yml,yaml}]
indent_size = 2
max_line_length = off

###############################
# JSON                        #
###############################

[*.json]
indent_size = 2
max_line_length = off

###############################
# PowerShell                  #
###############################

[*.ps1]
indent_size = 2

###############################
# Shell                       #
###############################

[*.sh]
end_of_line = lf

[*.{cmd,bat}]
end_of_line = crlf

###############################
# .NET project files          #
###############################

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

###############################
# C# / VB                     #
###############################

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4

# Organize usings
dotnet_sort_system_directives_first = true

# this. preferences
dotnet_style_qualification_for_field = false:silent
dotnet_style_qualification_for_property = false:silent
dotnet_style_qualification_for_method = false:silent
dotnet_style_qualification_for_event = false:silent

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent
dotnet_style_readonly_field = true:warning

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent

# Style Definitions
dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.constant_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constant_should_be_pascal_case.symbols = constant
dotnet_naming_rule.constant_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.private_or_internal_static_field_should_be_static_field.severity = suggestion
dotnet_naming_rule.private_or_internal_static_field_should_be_static_field.symbols = private_or_internal_static_field
dotnet_naming_rule.private_or_internal_static_field_should_be_static_field.style = static_field

dotnet_naming_rule.private_or_internal_field_should_be_instance_field.severity = suggestion
dotnet_naming_rule.private_or_internal_field_should_be_instance_field.symbols = private_or_internal_field
dotnet_naming_rule.private_or_internal_field_should_be_instance_field.style = instance_field

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.static_field.required_prefix = s_
dotnet_naming_style.static_field.required_suffix =
dotnet_naming_style.static_field.word_separator =
dotnet_naming_style.static_field.capitalization = camel_case

dotnet_naming_style.instance_field.required_prefix = _
dotnet_naming_style.instance_field.required_suffix =
dotnet_naming_style.instance_field.word_separator =
dotnet_naming_style.instance_field.capitalization = camel_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.private_or_internal_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_or_internal_field.required_modifiers =

dotnet_naming_symbols.private_or_internal_static_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_static_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_or_internal_static_field.required_modifiers = static

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

dotnet_naming_symbols.constant.applicable_kinds = field
dotnet_naming_symbols.constant.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.constant.required_modifiers = const
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_namespace_match_folder = true:suggestion
dotnet_style_allow_multiple_blank_lines_experimental = true:silent
dotnet_style_allow_statement_immediately_after_block_experimental = true:silent
dotnet_code_quality_unused_parameters = all:suggestion

# var preferences
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = false:warning
csharp_style_var_elsewhere = false:warning
# Expression-bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent
# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
# Expression-level preferences
csharp_prefer_braces = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true
csharp_using_directive_placement = outside_namespace:silent
csharp_prefer_simple_using_statement = true:warning
csharp_style_namespace_declarations = file_scoped:suggestion
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = false:silent
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:silent
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent
csharp_prefer_static_local_function = true:suggestion
csharp_style_prefer_readonly_struct = true:warning
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion

# ------------------------------------------------------
# CA Style

# CA1050: Types are declared in namespaces to prevent name collisions and as a way to organize related types in an object hierarchy.
dotnet_diagnostic.CA1050.severity = warning

# CA1507: Use nameof in place of string
#         Avoiding hard-coded strings in code improves maintainability and reduces the risk of errors during refactoring.
dotnet_diagnostic.CA1507.severity = warning

# CA1825: Avoid unnecessary zero-length array allocations. Use Array.Empty<Abc>() instead.
#         Array.Empty<T>() is more memory-efficient as it reuses a single cached empty array instance rather than creating new ones.
dotnet_diagnostic.CA1825.severity = warning

# CA1850: It is more efficient to use the static 'HashData' method over creating and managing a HashAlgorithm instance to call 'ComputeHash'.
#         This improves performance by avoiding unnecessary instance creation and lifecycle management of HashAlgorithm objects.
dotnet_diagnostic.CA1850.severity = warning

# CA1860: Prefer using 'IsEmpty', 'Count' or 'Length' properties whichever available, rather than calling 'Enumerable.Any()'.
#         These direct property accesses are more performant and communicate intent more clearly than using LINQ extension methods.
dotnet_diagnostic.CA1860.severity = warning

# CS1998: This async method lacks 'await' operators and will run synchronously.
#         Setting this to error prevents misleading code that suggests asynchronous behavior but actually runs synchronously.
dotnet_diagnostic.CS1998.severity = error

# CA2016: Forward the CancellationToken parameter to methods that take one
#         Ensuring proper propagation of cancellation tokens throughout the call chain is critical for responsive and cancellable operations.
dotnet_diagnostic.CA2016.severity = error

# ------------------------------------------------------
# IDE

# IDE0060: Avoid unused parameters in your code.
#          Silenced to allow for interface implementations where not all parameters may be needed in every implementation or like URL design in ASP.NET Core.
dotnet_diagnostic.IDE0060.severity = silent

# IDE0130: Namespace does not match folder structure
#          Enforces consistent organization where namespaces reflect folder structure, improving code discoverability.
dotnet_diagnostic.IDE0130.severity = warning

# IDE0039: Use local function instead of lambda
#          Local functions improve readability and performance over lambdas for method-local callable code.
dotnet_diagnostic.IDE0039.severity = warning

# IDE0270: Null check can be simplified
#          Disabled to allow developers to choose their preferred null-checking style based on context and readability.
dotnet_diagnostic.IDE0270.severity = none

# IDE0305: Use collection expression for fluent
#          Silenced because collection expression style is often a matter of preference and readability context.
dotnet_diagnostic.IDE0305.severity = silent

# IDE1006: Naming rule violation: These words must begin with upper case characters
#          Enforces consistent naming conventions across the codebase for better readability and maintainability.
dotnet_diagnostic.IDE1006.severity = warning

# ------------------------------------------------------
# Roslyn

# RCS0063: Remove unnecessary blank line
#          Promotes cleaner, more consistent code formatting by eliminating superfluous whitespace.
dotnet_diagnostic.RCS0063.severity = warning

# RCS1021: Use expression-bodied lambda.
#          Silenced to allow both statement and expression-bodied lambda syntax based on complexity and readability.
dotnet_diagnostic.RCS1021.severity = silent

# RCS1049: Simplify boolean comparison
#          Silenced to allow explicit boolean comparisons (e.g., x == true) when they improve readability.
dotnet_diagnostic.RCS1049.severity = silent

# RCS1123: Add parentheses when necessary
#          Enforces explicit operator precedence through parentheses, preventing subtle bugs and improving readability.
dotnet_diagnostic.RCS1123.severity = warning

# RCS1163: Unused parameter
#          Silenced because parameters may be kept for API consistency or documentation purposes even when unused or URL design in ASP.NET Core.
dotnet_diagnostic.RCS1163.severity = silent

# RCS1194: Implement exception constructors
#          Silenced to allow custom exception classes with only the constructors needed for the specific use case.
dotnet_diagnostic.RCS1194.severity = silent

# ------------------------------------------------------
# Meziantou.Analyzer

# MA0007: Add a comma after the last value
#         Disabled as trailing commas in C# are not conventional and would make the code less familiar to most developers.
dotnet_diagnostic.MA0007.severity = none

# MA0016: Prefer using collection abstraction instead of implementation
#         Disabled to allow direct use of concrete collection types when their specific capabilities are needed.
dotnet_diagnostic.MA0016.severity = none

# MA0017: Abstract types should not have public or internal constructors
#         Disabled to permit protected constructors in abstract classes which are valid for inheritance scenarios.
dotnet_diagnostic.MA0017.severity = none

# MA0018: Do not declare static members on generic types
#         Disabled in favor of using the standard CA1000 (Do not declare static members on generic types) rule to handle this case.
dotnet_diagnostic.MA0018.severity = none

# MA0029: Combine LINQ methods
#         Disabled because LINQ method chaining can be more readable and potential performance impacts need case-by-case review.
dotnet_diagnostic.MA0029.severity = none

# MA0040: Forward the CancellationToken parameter to methods that take one
#         Enforces proper cancellation token propagation for responsive applications and services.
dotnet_diagnostic.MA0040.severity = warning

# MA0048: File name must match type name
#         Silenced to allow flexibility in file naming, particularly for partial classes or multiple types in one file.
dotnet_diagnostic.MA0048.severity = silent

# MA0051: Method is too long
#         Set as suggestion to encourage smaller, more focused methods while allowing flexibility for complex logic.
dotnet_diagnostic.MA0051.severity = suggestion

# MA0154: Use langword in XML comment
#         Disabled to allow flexibility in documentation style and format.
dotnet_diagnostic.MA0154.severity = none

# ------------------------------------------------------
# Xunit

# xUnit1006: Theory methods should have parameters
#            Silenced to allow theories that might dynamically generate test cases without explicit parameters.
dotnet_diagnostic.xUnit1006.severity = silent

# xUnit1048: Support for 'async void' unit tests is being removed
#            Set as error to ensure future compatibility with xUnit v3 by requiring proper async Task signatures.
dotnet_diagnostic.xUnit1048.severity = error
